import socket
import time
import threading
from math import floor

class RecurringTimer(threading._Timer):
     
    def __init__ (self, *args, **kwargs):
        threading._Timer.__init__ (self, *args, **kwargs) 
        self.setDaemon (True)
        self._running = 0
        self._destroy = 0
        self.start()
 
    def run (self):
        while True:
            self.finished.wait (self.interval)
            if self._destroy:
                return;
            if self._running:
                self.function (*self.args, **self.kwargs)
 
    def start_timer (self):
        self._running = 1
 
    def stop_timer (self):
        self._running = 0
 
    def is_running (self):
        return self._running
 
    def destroy_timer (self):
        self._destroy = 1;


def timer_send():
	
	global mt
	mt_bin=mt>>0x18

	mt_bin=mt_bin&0x00000000000000000000000000000000000000000000000000ff

	if mt_bin<0x3b:
		mt=mt+0x1000000
	else:
		mt=mt+0x100000000000000
		mt=mt-0x3b000000
	mt_hex = (hex(mt))
	lenght = len(mt_hex)
	mt = mt_hex[:lenght - 1]

	print (mt)
	print hex(mt_bin)	

mt=0x26e10700000900000019000000010000000d0000001100000030000000
t= RecurringTimer(1.0, timer_send) #inicia el timer para mandar cada segundo la marca temporal
t.start_timer()
time.sleep(1.0)
while True:

    time.sleep(0.01)

